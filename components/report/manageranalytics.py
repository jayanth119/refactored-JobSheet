import sys 
import os 
import pandas as pd 
import streamlit as st
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import plotly.express as px

def manager_analytics(conn, start_date_str, end_date_str, user):
    """Store-specific analytics for manager users"""
    
    st.markdown(f"### 🏪 Store Analytics - {user.get('store_name', 'Your Store')}")
    
    # Manager sees only their store data
    where_clause = "j.created_at BETWEEN ? AND ? AND j.store_id = ?"
    params = [start_date_str, end_date_str, user['store_id']]
    
    # Get store information
    store_info = pd.read_sql("SELECT name, location, phone, email FROM stores WHERE id = ?", 
                            conn, params=[user['store_id']])
    
    if not store_info.empty:
        store = store_info.iloc[0]
        st.info(f"📍 {store['name']} | {store['location']} | 📞 {store['phone']}")
    
    # Create manager-specific tabs
    tab1, tab2, tab3, tab4 = st.tabs([
        "📊 Store Dashboard", 
        "👨‍🔧 Team Performance", 
        "📞 Customer Management",
        "💰 Revenue Analysis"
    ])
    
    with tab1:
        store_dashboard(conn, where_clause, params, user['store_id'])
    
    with tab2:
        team_performance(conn, where_clause, params, user['store_id'])
    
    with tab3:
        customer_management(conn, where_clause, params, user['store_id'])
    
    with tab4:
        revenue_analysis(conn, where_clause, params)


def store_dashboard(conn, where_clause, params, store_id):
    """Store-specific dashboard for managers"""
    
    # Store KPIs
    store_kpi_query = f"""
        SELECT 
            COUNT(*) as total_jobs,
            SUM(CASE WHEN status = 'Completed' THEN 1 ELSE 0 END) as completed_jobs,
            SUM(CASE WHEN status = 'In Progress' THEN 1 ELSE 0 END) as in_progress_jobs,
            SUM(CASE WHEN status = 'Pending' THEN 1 ELSE 0 END) as pending_jobs,
            SUM(CASE WHEN status = 'Completed' THEN actual_cost ELSE 0 END) as total_revenue,
            COUNT(DISTINCT customer_id) as unique_customers
        FROM jobs j
        WHERE {where_clause}
    """
    
    store_kpis = pd.read_sql(store_kpi_query, conn, params=params).iloc[0]
    
    # Display store KPIs
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Total Jobs", f"{store_kpis['total_jobs']:,}")
        st.metric("Completed", f"{store_kpis['completed_jobs']:,}")
    
    with col2:
        revenue = store_kpis['total_revenue'] if store_kpis['total_revenue'] else 0
        st.metric("Revenue", f"₹{revenue:,.2f}")
        st.metric("Unique Customers", f"{store_kpis['unique_customers']:,}")
    
    with col3:
        st.metric("In Progress", f"{store_kpis['in_progress_jobs']:,}")
        st.metric("Pending", f"{store_kpis['pending_jobs']:,}")

def team_performance(conn, where_clause, params, store_id):
    """Team performance analysis for managers"""
    
    # Get technicians assigned to this store
    team_query = f"""
        SELECT 
            u.id,
            u.full_name,
            u.email,
            COUNT(ta.id) as total_assignments,
            SUM(CASE WHEN ta.status = 'completed' THEN 1 ELSE 0 END) as completed_assignments,
            SUM(CASE WHEN j.status = 'Completed' THEN j.actual_cost ELSE 0 END) as revenue_generated
        FROM users u
        JOIN store_technicians st ON u.id = st.technician_id
        LEFT JOIN technician_assignments ta ON u.id = ta.technician_id
        LEFT JOIN assignment_jobs aj ON ta.id = aj.assignment_id
        LEFT JOIN jobs j ON aj.job_id = j.id AND j.created_at BETWEEN ? AND ?
        WHERE st.store_id = ? AND st.is_active = 1 AND u.role = 'technician'
        GROUP BY u.id, u.full_name, u.email
        ORDER BY revenue_generated DESC
    """
    
    team_data = pd.read_sql(team_query, conn, params=[params[0], params[1], store_id])
    
    if not team_data.empty:
        st.markdown("#### Team Performance")
        team_data['completion_rate'] = (team_data['completed_assignments'] / team_data['total_assignments'] * 100).round(1)
        team_data['revenue_generated'] = team_data['revenue_generated'].round(2)
        
        st.dataframe(team_data[['full_name', 'total_assignments', 'completed_assignments', 
                               'completion_rate', 'revenue_generated']])
        
        # Team performance visualization
        if len(team_data) > 1:
            fig = px.bar(team_data, x='full_name', y='revenue_generated',
                        title="Revenue Generated by Team Members", color='completion_rate')
            st.plotly_chart(fig, use_container_width=True)

def customer_management(conn, where_clause, params, store_id):
    """Customer management analytics for managers"""
    
    customer_query = f"""
        SELECT 
            c.name as customer_name,
            c.phone,
            COUNT(j.id) as total_jobs,
            SUM(CASE WHEN j.status = 'Completed' THEN j.actual_cost ELSE 0 END) as total_spent,
            MAX(j.created_at) as last_visit
        FROM customers c
        JOIN jobs j ON c.id = j.customer_id
        WHERE j.store_id = ? AND j.created_at BETWEEN ? AND ?
        GROUP BY c.id, c.name, c.phone
        ORDER BY total_spent DESC
        LIMIT 15
    """
    
    customers = pd.read_sql(customer_query, conn, params=[store_id, params[0], params[1]])
    
    if not customers.empty:
        st.markdown("#### Top Customers This Period")
        customers['total_spent'] = customers['total_spent'].round(2)
        st.dataframe(customers)

def revenue_analysis(conn, where_clause, params):
    """Detailed revenue analysis"""
    
    # Revenue by device type
    device_revenue_query = f"""
        SELECT 
            device_type,
            COUNT(*) as job_count,
            SUM(CASE WHEN status = 'Completed' THEN actual_cost ELSE 0 END) as total_revenue,
            AVG(CASE WHEN status = 'Completed' THEN actual_cost ELSE NULL END) as avg_revenue
        FROM jobs j
        WHERE {where_clause} AND status = 'Completed'
        GROUP BY device_type
        ORDER BY total_revenue DESC
    """
    
    device_revenue = pd.read_sql(device_revenue_query, conn, params=params)
    
    if not device_revenue.empty:
        col1, col2 = st.columns(2)
        
        with col1:
            fig = px.pie(device_revenue, values='total_revenue', names='device_type',
                        title="Revenue Distribution by Device Type")
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            fig = px.bar(device_revenue, x='device_type', y='avg_revenue',
                        title="Average Revenue per Device Type", color='job_count')
            st.plotly_chart(fig, use_container_width=True)
